{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n */\nabstract contract ERC1155Supply is ERC1155 {\n    mapping(uint256 => uint256) private _totalSupply;\n\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return ERC1155Supply.totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        if (from == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] += amounts[i];\n            }\n        }\n\n        if (to == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 id = ids[i];\n                uint256 amount = amounts[i];\n                uint256 supply = _totalSupply[id];\n                require(supply >= amount, \"ERC1155: burn amount exceeds totalSupply\");\n                unchecked {\n                    _totalSupply[id] = supply - amount;\n                }\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Gods.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\";\nimport \"./libraries/Utils.sol\";\n\n/// @title AVAXGods\n/// @notice This contract handles the token management and battle logic for the AVAXGods game\n/// @notice Version 1.0.0\n/// @author Ava-Labs\n/// @author Julian Martinez\n/// @author Gabriel Cardona\n/// @author Raj Ranjan\n\ncontract MATICGods is ERC1155, Ownable, ERC1155Supply {\n    string public baseURI; // baseURI where token metadata is stored\n    uint256 public totalSupply; // Total number of tokens minted\n    uint256 public constant DEVIL = 0;\n    uint256 public constant GRIFFIN = 1;\n    uint256 public constant FIREBIRD = 2;\n    uint256 public constant KAMO = 3;\n    uint256 public constant KUKULKAN = 4;\n    uint256 public constant CELESTION = 5;\n\n    uint256 public constant MAX_ATTACK_DEFEND_STRENGTH = 10;\n\n    mapping(address => uint256) public playerInfo; // Mapping of player addresses to player index in the players array\n    mapping(address => uint256) public playerTokenInfo; // Mapping of player addresses to player token index in the gameTokens array\n    mapping(string => uint256) public battleInfo; // Mapping of battle name to battle index in the battles array\n\n    Utils.Player[] public players; // Array of players\n    Utils.GameToken[] public gameTokens; // Array of game tokens\n    Utils.Battle[] public battles; // Array of battles\n\n    function updateBattle(\n        string memory _name,\n        Utils.Battle memory _newBattle\n    ) private {\n        require(Utils.isBattle(_name, battleInfo), \"Battle doesn't exist\");\n        battles[battleInfo[_name]] = _newBattle;\n    }\n\n    // Events\n    event NewPlayer(address indexed owner, string name);\n    event NewBattle(\n        string battleName,\n        address indexed player1,\n        address indexed player2\n    );\n    event BattleEnded(\n        string battleName,\n        address indexed winner,\n        address indexed loser\n    );\n    event BattleMove(string indexed battleName, bool indexed isFirstMove);\n    event NewGameToken(\n        address indexed owner,\n        uint256 id,\n        uint256 attackStrength,\n        uint256 defenseStrength\n    );\n    event RoundEnded(address[2] damagedPlayers);\n\n    /// @dev Initializes the contract by setting a `metadataURI` to the token collection\n    /// @param _metadataURI baseURI where token metadata is stored\n    constructor(string memory _metadataURI) ERC1155(_metadataURI) {\n        baseURI = _metadataURI; // Set baseURI\n        initialize();\n    }\n\n    function setURI(string memory newuri) public onlyOwner {\n        _setURI(newuri);\n    }\n\n    function initialize() private {\n        gameTokens.push(Utils.GameToken(\"\", 0, 0, 0));\n        players.push(Utils.Player(address(0), \"\", 0, 0, false));\n        battles.push(\n            Utils.Battle(\n                Utils.BattleStatus.PENDING,\n                bytes32(0),\n                \"\",\n                [address(0), address(0)],\n                [0, 0],\n                address(0)\n            )\n        );\n    }\n\n    /// @dev Registers a player\n    /// @param _name player name; set by player\n    function registerPlayer(\n        string memory _name,\n        string memory _gameTokenName\n    ) external {\n        require(\n            !Utils.isPlayer(msg.sender, playerInfo),\n            \"Player already registered\"\n        ); // Require that player is not already registered\n\n        uint256 _id = players.length;\n        players.push(Utils.Player(msg.sender, _name, 10, 25, false)); // Adds player to players array\n        playerInfo[msg.sender] = _id; // Creates player info mapping\n\n        createRandomGameToken(_gameTokenName);\n\n        emit NewPlayer(msg.sender, _name); // Emits NewPlayer event\n    }\n\n    /// @dev internal function to generate random number; used for Battle Card Attack and Defense Strength\n    function _createRandomNum(\n        uint256 _max,\n        address _sender\n    ) internal view returns (uint256 randomValue) {\n        uint256 randomNum = uint256(\n            keccak256(\n                abi.encodePacked(block.difficulty, block.timestamp, _sender)\n            )\n        );\n\n        randomValue = randomNum % _max;\n        if (randomValue == 0) {\n            randomValue = _max / 2;\n        }\n\n        return randomValue;\n    }\n\n    /// @dev internal function to create a new Battle Card\n    function _createGameToken(\n        string memory _name\n    ) internal returns (Utils.GameToken memory) {\n        uint256 randAttackStrength = _createRandomNum(\n            MAX_ATTACK_DEFEND_STRENGTH,\n            msg.sender\n        );\n        uint256 randDefenseStrength = MAX_ATTACK_DEFEND_STRENGTH -\n            randAttackStrength;\n\n        uint8 randId = uint8(\n            uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender))) %\n                100\n        );\n        randId = randId % 6;\n        if (randId == 0) {\n            randId++;\n        }\n\n        Utils.GameToken memory newGameToken = Utils.GameToken(\n            _name,\n            randId,\n            randAttackStrength,\n            randDefenseStrength\n        );\n\n        uint256 _id = gameTokens.length;\n        gameTokens.push(newGameToken);\n        playerTokenInfo[msg.sender] = _id;\n\n        _mint(msg.sender, randId, 1, \"0x0\");\n        totalSupply++;\n\n        emit NewGameToken(\n            msg.sender,\n            randId,\n            randAttackStrength,\n            randDefenseStrength\n        );\n        return newGameToken;\n    }\n\n    /// @dev Creates a new game token\n    /// @param _name game token name; set by player\n    function createRandomGameToken(string memory _name) public {\n        require(\n            !Utils.getPlayer(msg.sender, players, playerInfo).inBattle,\n            \"Player is in a battle\"\n        ); // Require that player is not already in a battle\n        require(\n            Utils.isPlayer(msg.sender, playerInfo),\n            \"Please Register Player First\"\n        ); // Require that the player is registered\n\n        _createGameToken(_name); // Creates game token\n    }\n\n    function getTotalSupply() external view returns (uint256) {\n        return totalSupply;\n    }\n\n    /// @dev Creates a new battle\n    /// @param _name battle name; set by player\n    function createBattle(\n        string memory _name\n    ) external returns (Utils.Battle memory) {\n        require(\n            Utils.isPlayer(msg.sender, playerInfo),\n            \"Please Register Player First\"\n        ); // Require that the player is registered\n        require(!Utils.isBattle(_name, battleInfo), \"Battle already exists!\"); // Require battle with same name should not exist\n\n        bytes32 battleHash = keccak256(abi.encode(_name));\n\n        Utils.Battle memory _battle = Utils.Battle(\n            Utils.BattleStatus.PENDING, // Battle pending\n            battleHash, // Battle hash\n            _name, // Battle name\n            [msg.sender, address(0)], // player addresses; player 2 empty until they joins battle\n            [0, 0], // moves for each player\n            address(0) // winner address; empty until battle ends\n        );\n\n        uint256 _id = battles.length;\n        battleInfo[_name] = _id;\n        battles.push(_battle);\n\n        return _battle;\n    }\n\n    /// @dev Player joins battle\n    /// @param _name battle name; name of battle player wants to join\n    function joinBattle(\n        string memory _name\n    ) external returns (Utils.Battle memory) {\n        Utils.Battle memory _battle = Utils.getBattle(\n            _name,\n            battles,\n            battleInfo\n        );\n\n        require(\n            _battle.battleStatus == Utils.BattleStatus.PENDING,\n            \"Battle already started!\"\n        ); // Require that battle has not started\n        require(\n            _battle.players[0] != msg.sender,\n            \"Only player two can join a battle\"\n        ); // Require that player 2 is joining the battle\n        require(\n            !Utils.getPlayer(msg.sender, players, playerInfo).inBattle,\n            \"Already in battle\"\n        ); // Require that player is not already in a battle\n\n        _battle.battleStatus = Utils.BattleStatus.STARTED;\n        _battle.players[1] = msg.sender;\n        updateBattle(_name, _battle);\n\n        players[playerInfo[_battle.players[0]]].inBattle = true;\n        players[playerInfo[_battle.players[1]]].inBattle = true;\n\n        emit NewBattle(_battle.name, _battle.players[0], msg.sender); // Emits NewBattle event\n        return _battle;\n    }\n\n    // Read battle move info for player 1 and player 2\n    function getBattleMoves(\n        string memory _battleName\n    ) public view returns (uint256 P1Move, uint256 P2Move) {\n        Utils.Battle memory _battle = Utils.getBattle(\n            _battleName,\n            battles,\n            battleInfo\n        );\n\n        P1Move = _battle.moves[0];\n        P2Move = _battle.moves[1];\n\n        return (P1Move, P2Move);\n    }\n\n    function _registerPlayerMove(\n        uint256 _player,\n        uint8 _choice,\n        string memory _battleName\n    ) internal {\n        require(\n            _choice == 1 || _choice == 2,\n            \"Choice should be either 1 or 2!\"\n        );\n        require(\n            _choice == 1\n                ? Utils.getPlayer(msg.sender, players, playerInfo).playerMana >=\n                    3\n                : true,\n            \"Mana not sufficient for attacking!\"\n        );\n        battles[battleInfo[_battleName]].moves[_player] = _choice;\n    }\n\n    // User chooses attack or defense move for battle card\n    function attackOrDefendChoice(\n        uint8 _choice,\n        string memory _battleName\n    ) external {\n        Utils.Battle memory _battle = Utils.getBattle(\n            _battleName,\n            battles,\n            battleInfo\n        );\n\n        require(\n            _battle.battleStatus == Utils.BattleStatus.STARTED,\n            \"Battle not started. Please tell another player to join the battle\"\n        ); // Require that battle has started\n        require(\n            _battle.battleStatus != Utils.BattleStatus.ENDED,\n            \"Battle has already ended\"\n        ); // Require that battle has not ended\n        require(\n            msg.sender == _battle.players[0] ||\n                msg.sender == _battle.players[1],\n            \"You are not in this battle\"\n        ); // Require that player is in the battle\n\n        require(\n            _battle.moves[_battle.players[0] == msg.sender ? 0 : 1] == 0,\n            \"You have already made a move!\"\n        );\n\n        _registerPlayerMove(\n            _battle.players[0] == msg.sender ? 0 : 1,\n            _choice,\n            _battleName\n        );\n\n        _battle = Utils.getBattle(_battleName, battles, battleInfo);\n        uint _movesLeft = 2 -\n            (_battle.moves[0] == 0 ? 0 : 1) -\n            (_battle.moves[1] == 0 ? 0 : 1);\n        emit BattleMove(_battleName, _movesLeft == 1 ? true : false);\n\n        if (_movesLeft == 0) {\n            _awaitBattleResults(_battleName);\n        }\n    }\n\n    // Awaits battle results\n    function _awaitBattleResults(string memory _battleName) internal {\n        Utils.Battle memory _battle = Utils.getBattle(\n            _battleName,\n            battles,\n            battleInfo\n        );\n\n        require(\n            msg.sender == _battle.players[0] ||\n                msg.sender == _battle.players[1],\n            \"Only players in this battle can make a move\"\n        );\n\n        require(\n            _battle.moves[0] != 0 && _battle.moves[1] != 0,\n            \"Players still need to make a move\"\n        );\n\n        _resolveBattle(_battle);\n    }\n\n    /// @dev Resolve battle function to determine winner and loser of battle\n    /// @param _battle battle; battle to resolve\n    function _resolveBattle(Utils.Battle memory _battle) internal {\n        Utils.P memory p1 = Utils.P(\n            playerInfo[_battle.players[0]],\n            _battle.moves[0],\n            Utils\n                .getPlayer(_battle.players[0], players, playerInfo)\n                .playerHealth,\n            Utils\n                .getPlayerToken(_battle.players[0], gameTokens, playerTokenInfo)\n                .attackStrength,\n            Utils\n                .getPlayerToken(_battle.players[0], gameTokens, playerTokenInfo)\n                .defenseStrength\n        );\n\n        Utils.P memory p2 = Utils.P(\n            playerInfo[_battle.players[1]],\n            _battle.moves[1],\n            Utils\n                .getPlayer(_battle.players[1], players, playerInfo)\n                .playerHealth,\n            Utils\n                .getPlayerToken(_battle.players[1], gameTokens, playerTokenInfo)\n                .attackStrength,\n            Utils\n                .getPlayerToken(_battle.players[1], gameTokens, playerTokenInfo)\n                .defenseStrength\n        );\n\n        address[2] memory _damagedPlayers = [address(0), address(0)];\n\n        if (p1.move == 1 && p2.move == 1) {\n            if (p1.attack >= p2.health) {\n                _endBattle(_battle.players[0], _battle);\n            } else if (p2.attack >= p1.health) {\n                _endBattle(_battle.players[1], _battle);\n            } else {\n                players[p1.index].playerHealth -= p2.attack;\n                players[p2.index].playerHealth -= p1.attack;\n\n                players[p1.index].playerMana -= 3;\n                players[p2.index].playerMana -= 3;\n\n                // Both player's health damaged\n                _damagedPlayers = _battle.players;\n            }\n        } else if (p1.move == 1 && p2.move == 2) {\n            uint256 PHAD = p2.health + p2.defense;\n            if (p1.attack >= PHAD) {\n                _endBattle(_battle.players[0], _battle);\n            } else {\n                uint256 healthAfterAttack;\n\n                if (p2.defense > p1.attack) {\n                    healthAfterAttack = p2.health;\n                } else {\n                    healthAfterAttack = PHAD - p1.attack;\n\n                    // Player 2 health damaged\n                    _damagedPlayers[0] = _battle.players[1];\n                }\n\n                players[p2.index].playerHealth = healthAfterAttack;\n\n                players[p1.index].playerMana -= 3;\n                players[p2.index].playerMana += 3;\n            }\n        } else if (p1.move == 2 && p2.move == 1) {\n            uint256 PHAD = p1.health + p1.defense;\n            if (p2.attack >= PHAD) {\n                _endBattle(_battle.players[1], _battle);\n            } else {\n                uint256 healthAfterAttack;\n\n                if (p1.defense > p2.attack) {\n                    healthAfterAttack = p1.health;\n                } else {\n                    healthAfterAttack = PHAD - p2.attack;\n\n                    // Player 1 health damaged\n                    _damagedPlayers[0] = _battle.players[0];\n                }\n\n                players[p1.index].playerHealth = healthAfterAttack;\n\n                players[p1.index].playerMana += 3;\n                players[p2.index].playerMana -= 3;\n            }\n        } else if (p1.move == 2 && p2.move == 2) {\n            players[p1.index].playerMana += 3;\n            players[p2.index].playerMana += 3;\n        }\n\n        emit RoundEnded(_damagedPlayers);\n\n        // Reset moves to 0\n        _battle.moves[0] = 0;\n        _battle.moves[1] = 0;\n        updateBattle(_battle.name, _battle);\n\n        // Reset random attack and defense strength\n        uint256 _randomAttackStrengthPlayer1 = _createRandomNum(\n            MAX_ATTACK_DEFEND_STRENGTH,\n            _battle.players[0]\n        );\n        gameTokens[playerTokenInfo[_battle.players[0]]]\n            .attackStrength = _randomAttackStrengthPlayer1;\n        gameTokens[playerTokenInfo[_battle.players[0]]].defenseStrength =\n            MAX_ATTACK_DEFEND_STRENGTH -\n            _randomAttackStrengthPlayer1;\n\n        uint256 _randomAttackStrengthPlayer2 = _createRandomNum(\n            MAX_ATTACK_DEFEND_STRENGTH,\n            _battle.players[1]\n        );\n        gameTokens[playerTokenInfo[_battle.players[1]]]\n            .attackStrength = _randomAttackStrengthPlayer2;\n        gameTokens[playerTokenInfo[_battle.players[1]]].defenseStrength =\n            MAX_ATTACK_DEFEND_STRENGTH -\n            _randomAttackStrengthPlayer2;\n    }\n\n    function quitBattle(string memory _battleName) public {\n        Utils.Battle memory _battle = Utils.getBattle(\n            _battleName,\n            battles,\n            battleInfo\n        );\n        require(\n            _battle.players[0] == msg.sender ||\n                _battle.players[1] == msg.sender,\n            \"You are not in this battle!\"\n        );\n\n        _battle.players[0] == msg.sender\n            ? _endBattle(_battle.players[1], _battle)\n            : _endBattle(_battle.players[0], _battle);\n    }\n\n    /// @dev internal function to end the battle\n    /// @param battleEnder winner address\n    /// @param _battle battle; taken from attackOrDefend function\n    function _endBattle(\n        address battleEnder,\n        Utils.Battle memory _battle\n    ) internal returns (Utils.Battle memory) {\n        require(\n            _battle.battleStatus != Utils.BattleStatus.ENDED,\n            \"Battle already ended\"\n        ); // Require that battle has not ended\n\n        _battle.battleStatus = Utils.BattleStatus.ENDED;\n        _battle.winner = battleEnder;\n        updateBattle(_battle.name, _battle);\n\n        uint p1 = playerInfo[_battle.players[0]];\n        uint p2 = playerInfo[_battle.players[1]];\n\n        players[p1].inBattle = false;\n        players[p1].playerHealth = 25;\n        players[p1].playerMana = 10;\n\n        players[p2].inBattle = false;\n        players[p2].playerHealth = 25;\n        players[p2].playerMana = 10;\n\n        address _battleLoser = battleEnder == _battle.players[0]\n            ? _battle.players[1]\n            : _battle.players[0];\n\n        emit BattleEnded(_battle.name, battleEnder, _battleLoser); // Emits BattleEnded event\n\n        return _battle;\n    }\n\n    // Token URI getter function\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    baseURI,\n                    \"/\",\n                    Utils.uintToStr(tokenId),\n                    \".json\"\n                )\n            );\n    }\n\n    // The following functions are overrides required by Solidity.\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal override(ERC1155, ERC1155Supply) {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n    }\n}\n"
    },
    "contracts/libraries/Utils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nlibrary Utils {\n    enum BattleStatus {\n        PENDING,\n        STARTED,\n        ENDED\n    }\n\n    struct P {\n        uint index;\n        uint move;\n        uint health;\n        uint attack;\n        uint defense;\n    }\n\n    /// @dev GameToken struct to store player token info\n    struct GameToken {\n        string name; /// @param name battle card name; set by player\n        uint256 id; /// @param id battle card token id; will be randomly generated\n        uint256 attackStrength; /// @param attackStrength battle card attack; generated randomly\n        uint256 defenseStrength; /// @param defenseStrength battle card defense; generated randomly\n    }\n\n    /// @dev Player struct to store player info\n    struct Player {\n        address playerAddress; /// @param playerAddress player wallet address\n        string playerName; /// @param playerName player name; set by player during registration\n        uint256 playerMana; /// @param playerMana player mana; affected by battle results\n        uint256 playerHealth; /// @param playerHealth player health; affected by battle results\n        bool inBattle; /// @param inBattle boolean to indicate if a player is in battle\n    }\n\n    /// @dev Battle struct to store battle info\n    struct Battle {\n        BattleStatus battleStatus; /// @param battleStatus enum to indicate battle status\n        bytes32 battleHash; /// @param battleHash a hash of the battle name\n        string name; /// @param name battle name; set by player who creates battle\n        address[2] players; /// @param players address array representing players in this battle\n        uint8[2] moves; /// @param moves uint array representing players' move\n        address winner; /// @param winner winner address\n    }\n\n    // Turns uint256 into string\n    function uintToStr(\n        uint256 _i\n    ) public pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint256 j = _i;\n        uint256 len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint256 k = len;\n        while (_i != 0) {\n            k = k - 1;\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\n            bytes1 b1 = bytes1(temp);\n            bstr[k] = b1;\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n\n    function isPlayer(\n        address addr,\n        mapping(address => uint256) storage playerInfo\n    ) public view returns (bool) {\n        if (playerInfo[addr] == 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    function getPlayer(\n        address addr,\n        Player[] memory players,\n        mapping(address => uint256) storage playerInfo\n    ) public view returns (Player memory) {\n        require(isPlayer(addr, playerInfo), \"Player doesn't exist!\");\n        return players[playerInfo[addr]];\n    }\n\n    function isPlayerToken(\n        address addr,\n        mapping(address => uint256) storage playerTokenInfo\n    ) public view returns (bool) {\n        if (playerTokenInfo[addr] == 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    function getPlayerToken(\n        address addr,\n        GameToken[] memory gameTokens,\n        mapping(address => uint256) storage playerTokenInfo\n    ) public view returns (GameToken memory) {\n        require(\n            isPlayerToken(addr, playerTokenInfo),\n            \"Game token doesn't exist!\"\n        );\n        return gameTokens[playerTokenInfo[addr]];\n    }\n\n    // Battle getter function\n    function isBattle(\n        string memory _name,\n        mapping(string => uint256) storage battleInfo\n    ) public view returns (bool) {\n        if (battleInfo[_name] == 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    function getBattle(\n        string memory _name,\n        Battle[] memory battles,\n        mapping(string => uint256) storage battleInfo\n    ) public view returns (Battle memory) {\n        require(isBattle(_name, battleInfo), \"Battle doesn't exist!\");\n        return battles[battleInfo[_name]];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}